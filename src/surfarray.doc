pygame.surfarray
pygame module for accessing surface pixel data

Functions to convert pixel data between pygame Surfaces and Numeric arrays.
This module will only be available when pygame can use the external Numeric
package.

Note, that surfarray is an optional module.  It requires that Numeric is 
installed to be used.  If not installed, an exception will be raised when
it is used.  eg. NotImplementedError: surfarray module not available

Every pixel is stored as a single integer value to represent the red, green,
and blue colors. The 8bit images use a value that looks into a colormap. Pixels
with higher depth use a bit packing process to place three or four values into
a single number.

The Numeric arrays are indexed by the X axis first, followed by the Y axis.
Arrays that treat the pixels as a single integer are referred to as 2D arrays.
This module can also separate the red, green, and blue color values into
separate indices. These types of arrays are referred to as 3D arrays, and the last
index is 0 for red, 1 for green, and 2 for blue.

Numeric does not use unsigned 16bit integers, images with 16bit data will
be treated as signed integers.
<SECTION>



array2d
copy pixels into a 2d array
pygame.surfarray.array2d(Surface): return array

Copy the pixels from a Surface into a 2D array. The bit depth of the surface
will control the size of the integer values, and will work for any type of
pixel format.

This function will temporarily lock the Surface as pixels are copied
(see the Surface.lock() method).
<END>



pixels2d
reference pixels into a 2d array
pygame.surfarray.pixels2d(Surface): return array

Create a new 2D array that directly references the pixel values in a Surface.
Any changes to the array will affect the pixels in the Surface. This is a
fast operation since no data is copied.

Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit
depths can.

The Surface this references will remain locked for the lifetime of the array
(see the Surface.lock() method).
<END>



array3d
copy pixels into a 3d array
pygame.surfarray.array3d(Surface): return array

Copy the pixels from a Surface into a 3D array. The bit depth of the surface
will control the size of the integer values, and will work for any type of
pixel format.

This function will temporarily lock the Surface as pixels are copied
(see the Surface.lock() method).
<END>



pixels3d
reference pixels into a 3d array
pygame.surfarray.pixels3d(Surface): return array

Create a new 3D array that directly references the pixel values in a Surface.
Any changes to the array will affect the pixels in the Surface. This is a
fast operation since no data is copied.

This will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel
formats cannot be referenced.

The Surface this references will remain locked for the lifetime of the array
(see the Surface.lock() method).
<END>




array_alpha
copy pixel alphas into a 2d array
pygame.surfarray.array_alpha(Surface): return array

Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work
for any type of Surface format. Surfaces without a pixel alpha will return
an array with all opaque values.

This function will temporarily lock the Surface as pixels are copied
(see the Surface.lock() method).
<END>



pixels_alpha
reference pixel alphas into a 2d array
pygame.surfarray.pixels_alpha(Surface): return array

Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface.
Any changes to the array will affect the pixels in the Surface. This is a
fast operation since no data is copied.

This can only work on 32-bit Surfaces with a per-pixel alpha value.

The Surface this references will remain locked for the lifetime of the array.
<END>



array_colorkey
copy the colorkey values into a 2d array
pygame.surfarray.array_colorkey(Surface): return array

Create a new array with the colorkey transparency value from each pixel. If
the pixel matches the colorkey it will be fully tranparent; otherwise it
will be fully opaque.

This will work on any type of Surface format. If the image has no colorkey
a solid opaque array will be returned.

This function will temporarily lock the Surface as pixels are copied.
<END>



make_surface
copy an array to a new surface
pygame.surfarray.make_surface(array): return Surface

Create a new Surface that best resembles the data and format on the array.
The array can be 2D or 3D with any sized integer values.
<END>



blit_array
blit directly from a array values
pygame.surfarray.blit_array(Surface, array): return None

Directly copy values from an array into a Surface. This is faster than
converting the array into a Surface and blitting. The array must be the
same dimensions as the Surface and will completely replace all pixel values.

This function will temporarily lock the Surface as the new values are copied.
<END>



map_array
map a 3d array into a 2d array
pygame.surfarray.map_array(Surface, array3d): return array2d

Convert a 3D array into a 2D array. This will use the given Surface format
to control the conversion.
<END>
<END>
