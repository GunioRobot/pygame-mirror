pygame.Mask
pygame object for representing 2d bitmasks
pygame.Mask((width, height): return Mask

Useful for fast pixel perfect collision detection.  A Mask uses 1bit per 
pixel to store which parts collide.

New in pygame 1.8.

<SECTION>


from_surface
Returns the size of the mask.
Mask.from_surface(surface) -> Mask

<END>


get_size
Returns the size of the mask.
Mask.get_size() -> width,height

<END>


get_at
Returns nonzero if the bit at (x,y) is set.
Mask.get_at((x,y)) -> int

Coordinates start at (0,0)
<END>


set_at
Sets the position in the mask given by x and y.
Mask.set_at((x,y),value)
<END>



overlap
Returns nonzero if the masks overlap with the given offset. 
Mask.overlap(othermask, offset) -> x,y

The overlap tests uses the following offsets (which may be negative):

   +----+----------..
   |A   | yoffset   
   |  +-+----------..
   +--|B        
   |xoffset      
   |  |
   :  :  
<END>


overlap_area
Returns the number of overlapping 'pixels'.
Mask.overlap_area(othermask, offset) -> numpixels

<END>


<END>
