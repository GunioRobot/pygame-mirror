pygame.transform
pygame module to transform surfaces

A Surface transform is an operation that moves or resizes the pixels. All
these functions take a Surface to operate on and return a new Surface with
the results.

Some of the transforms are considered destructive. These means every time
they are performed they lose pixel data. Common examples of this are resizing
and rotating. It is best to retransform the original surface than to 
keep transforming an image multiple times.
<SECTION>



flip
flip vertically and horizontally
pygame.transform.flip(Surface, xbool, ybool): return Surface

This can flip a Surface either vertically, horizontally, or both. Flipping
a Surface is nondestructive and returns a new Surface with the same dimensions.
<END>



scale
resize to new resolution
pygame.transform.scale(Surface, (width, height)): return Surface

Resizes the Surface to a new resolution. This is a fast scale operation
that does not sample the results. 
<END>



rotate
rotate an image
pygame.transform.rotate(Surface, angle): return Surface

Unfiltered counterclockwise rotation. The angle argument represents degrees
and can be any floating point value. Negavive angle amounts will rotate
clockwise.

Unless rotating by 90 degree increments, the image will be padded larger
to hold the new size. If the image has pixel alphas, the padded area will
be transparent. Otherwise pygame will pick a color that matches the Surface
colorkey or the topleft pixel value.
<END>



rotozoom
filtered scale and rotation
pygame.transorm.rotozoom(Surface, angle, scale): return Surface

This is a combines scale and rotation transform. The resulting Surface will
be filtered 32bit Surface. The scale argument is a floating point value
that will be multiplied by the current resolution. The angle argument is
a floating point value that represents the counterclockwise degrees to
rotate. A negative rotation angle will rotate clockwise.
<END>



scale2x
specialized image doubler
pygame.transform.scale2x(Surface): Surface

This will return a new image that is double the size of the original. It uses
the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap
graphics.
 
This really only has an effect on simple images with solid colors. On
photographic and antialiased images it will look like a regular unfiltered
scale.
<END>



chop
remove interior area of an image
pygame.transform.chop(Surface, rect): return Surface

Removes an interior set of columns and rows from a Surface. All vertical and
horizontal pixels surrounding the given rectangle area are removed. The
resulting image is shrunken by the size of pixels removed.
<END>
<END>
