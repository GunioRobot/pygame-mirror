pygame.examples
module of example programs

These examples should help get you started with pygame. Here is a
brief rundown of what you get. The source code for these examples
is in the public domain. Feel free to use for your own projects.

These examples can be run as stand-alone programs, or as described
below, by importing the module and calling its main().

Resources for the examples are found in the pygame/examples/data
subdirectory.

We're always on the lookout for more examples and/or example
requests. Code like this is probably the best way to start
getting involved with python gaming.

This page is adapted from the original examples readme.txt by:
    Pete Shinners
    shredwheat@mediaone.net

Further references

  pySDL    : http://pysdl.sourceforge.net
  SDL      : http://www.libsdl.org
  aliens.c : http://www.libsdl.org/projects/aliens

examples as a package is new to pygame 1.9.0.
<SECTION>



aliens.main
play the full aliens example
pygame.aliens.main(): return None

This started off as a port of the SDL demonstration,
Aliens. Now it has evolved into something sort of resembling
fun. This demonstrates a lot of different uses of sprites and
optimized blitting. Also transparency, colorkeys, fonts, sound,
music, joystick, and more. (PS, my high score is 117! goodluck)
<END>



oldalien.main
play the original aliens example
pygame.examples.oldalien.main(): return None

This more closely resembles a port of the SDL Aliens
demo. The code is a lot simpler, so it makes a better starting
point for people looking at code for the first times. These
blitting routines are not as optimized as they should/could be,
but the code is easier to follow, and it plays quick enough.
<END>



stars.main
run a simple starfield example
pygame.examples.stars.main(): return None

A simple starfield example. You can change the center of
perspective by leftclicking the mouse on the screen.
<END>



fonty.main
run a font rendering example
pygame.examples.fonty.main(): return None

Super quick, super simple application demonstrating
the different ways to render fonts with the font module
<END>



vgrade.main
display a vertical gradient
pygame.examples.vgrade.main(): return None

Demonstrates creating a vertical gradient with
Numeric python. The app will create a new gradient every half
second and report the time needed to create and display the
image. If you're not prepared to start working with the
Numeric arrays, don't worry about the source for this one :]
<END>



arraydemo.main
show various surfarray effects
pygame.examples.arraydemo.main(): return None

Another example filled with various surfarray
effects. It requires the surfarray and image modules to
be installed. This little demo can also make a good starting
point for any of your own tests with surfarray

The example will use NumPy by default, but will use Numeric
as a alternative (New pygame 1.9.0).
<END>



sound.main
load and play a sound
pygame.examples.sound.main(file_path=None): return None

Extremely basic testing of the mixer module. Load a
sound and play it. All from the command shell, no graphics.

If provided, use the audio file 'file_path', otherwise use a
default file.

sound.py optional command line argument: an audio file
<END>



liquid.main
display an animated liquid effect
pygame.examples.liquid.main(): return None

This example was created in a quick comparison with the
BlitzBasic gaming language. Nonetheless, it demonstrates a quick
8-bit setup (with colormap).
<END>



glcube.main
display an animated 3D cube using OpenGL
pygame.examples.glcube.main(): return None

Using PyOpenGL and pygame, this creates a spinning 3D
multicolored cube.
<END>



scrap_clipboard.main
access the clipboard
pygame.examples.scrap_clipboard.main(): return None

A simple demonstration example for the clipboard support.
<END>




mask.main
display multiple images bounce off each other using collision detection
pygame.examples.mask.main(*args): return None

Positional arguments:
    one or more image file names.

This pygame.masks demo will display multiple moving sprites bouncing
off each other. More than one sprite image can be provided.

If run as a program then mask.py takes one or more image files
as command line arguments.
<END>




teststrite.main
show lots of sprites moving around
pygame.examples.testsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = [640, 480], use_alpha = False, flags = 0): return None

Optional keyword arguments:
    update_rects - use the RenderUpdate sprite group class
    use_static - include non-moving images
    use_FastRenderGroup - Use the FastRenderGroup sprite group
    screen_dims - pygame window dimensions
    use_alpha - use alpha blending
    flags - additional display mode flags

Like the testsprite.c that comes with sdl, this pygame version shows 
lots of sprites moving around.

If run as a stand-alone program then no command line arguments are taken.
<END>




headless_no_windows_needed.main
write an image file that is smoothscaled copy of an input file
pygame.examples.headless_no_windows_needed.main(fin, fout, w, h): return None

arguments:
    fin - name of an input image file
    fout - name of the output file to create/overwrite
    w, h - size of the rescaled image, as integer width and height

How to use pygame with no windowing system, like on headless servers.

Thumbnail generation with scaling is an example of what you can do with pygame.

NOTE: the pygame scale function uses mmx/sse if available, and can be run 
in multiple threads.

If headless_no_windows_needed.py is run as a program it takes the following
command line arguments:
    -scale inputimage outputimage new_width new_height
    eg. -scale in.png outpng 50 50
<END>




overlay.main
play a .pgm video using overlays
pygame.examples.overlay.main(fname): return None

Play the .pgm video fila a path fname.

If run as a program overlay.py takes the file name as a command line argument.
<END>




scaletest.main
interactively scale an image using smoothscale
pygame.examples.scaletest.main(imagefile, convert_alpha=False, run_speed_test=True): return None

arguments:
    imagefile - file name of source image (required)
    convert_alpha - use convert_alpha() on the surf (default False)
    run_speed_test - (default False)

A smoothscale example that resized an image on the screen.
Vertical and horizontal arrow keys are used to change the width and
height of the displayed image. If the convert_alpha option is True
then the source image is forced to have source alpha, whether or
not the original images does. If run_speed_test is True then a
background timing test is performed instead of the interactive scaler.

If scaletest.py is run as a program then the command line options are:
    ImageFile [-t] [-convert_alpha]
    [-t] = Run Speed Test
    [-convert_alpha] = Use convert_alpha() on the surf.
<END>



midi.main
run a midi example
pygame.examples.midi.main(mode='output', device_id=None): return None

Arguments:
    mode - if 'output' run a midi keyboard output example
              'input' run a midi event logger input example
              'list' list available midi devices
           (default 'output')
    device_id - midi device number; if None then use the default midi input or
                output device for the system

The output example shows how to translate mouse clicks or computer keyboard
events into midi notes. It implements a rudimentary button widget and state
machine.

The input example shows how to translate midi input to pygame events.

With the use of a virtual midi patch cord the output and input examples can
be run as separate processes and connected so the keyboard output is displayed
on a console.

new to pygame 1.9.0
<END>